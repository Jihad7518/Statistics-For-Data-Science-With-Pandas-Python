# -*- coding: utf-8 -*-
"""Lab_07_2020_3_60_087_Jihad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVQx3TMq8gag0MnL_sRdHTZ2p93Ps8CA
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("worldometer_data.csv")
df

missing_values = df.isnull().sum()

print("Columns with Missing Values:")
print(missing_values[missing_values > 0])

numeric_columns = ['Population', 'TotalCases', 'TotalDeaths', 'TotalRecovered', 'ActiveCases',
                   'Serious,Critical', 'Tot Cases/1M pop', 'Deaths/1M pop', 'TotalTests', 'Tests/1M pop']

numeric_data = df[numeric_columns]

basic_stats = numeric_data.describe()

print(basic_stats)

total_confirmed = df['TotalCases'].sum()
total_deaths = df['TotalDeaths'].sum()
total_recovered = df['TotalRecovered'].sum()
total_active = df['ActiveCases'].sum()

categories = ['TotalCases', 'TotalDeaths', 'TotalRecovered', 'ActiveCases']
values = [total_confirmed, total_deaths, total_recovered, total_active]

plt.figure(figsize=(10, 6))
bars = plt.bar(categories, values, color=['gold', 'lightcoral', 'lightgreen', 'lightskyblue'])
plt.xlabel('Categories')
plt.ylabel('Total Cases')
plt.title('Total COVID-19 Cases')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')

plt.show()

import geopandas as gpd

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

merged = world.merge(df, how='left', left_on='name', right_on='Country/Region')

fig, ax = plt.subplots(1, 1, figsize=(15, 10))
merged.plot(column='TotalCases', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)
ax.set_title('COVID-19 Total Cases by Country/Region')
plt.show()

import geopandas as gpd

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

merged = world.merge(df, how='left', left_on='name', right_on='Country/Region')

fig, ax = plt.subplots(1, 1, figsize=(15, 10))
merged.plot(column='TotalDeaths', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)
ax.set_title('COVID-19 Total Deaths Cases by Country/Region')
plt.show()

total_confirmed_per_region = df.groupby('WHO Region')['TotalCases'].sum().reset_index()

plt.figure(figsize=(12, 6))
bar_chart_confirmed = sns.barplot(x='WHO Region', y='TotalCases', data=total_confirmed_per_region, palette='viridis')
plt.title('Total Cases per WHO Region')
plt.xlabel('WHO Region')
plt.ylabel('Total Confirmed Cases')

for index, value in enumerate(total_confirmed_per_region['TotalCases']):
    plt.text(index, value + 0.1, f'{value}', ha='center', va='bottom', fontsize=8)

plt.show()

tests_per_million_by_region = df.groupby('WHO Region')['Tests/1M pop'].mean().reset_index()

plt.figure(figsize=(12, 6))
tests_bar = sns.barplot(x='WHO Region', y='Tests/1M pop', data=tests_per_million_by_region, palette='BuPu')
plt.title('Tests per Million Population by WHO Region')
plt.xlabel('WHO Region')
plt.ylabel('Tests per Million Population')

for index, value in enumerate(tests_per_million_by_region['Tests/1M pop']):
    plt.text(index, value + 50, f'{value:.2f}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

total_deaths_per_region = df.groupby('WHO Region')['TotalDeaths'].sum().reset_index()

plt.figure(figsize=(12, 6))
bar_chart_deaths = sns.barplot(x='WHO Region', y='TotalDeaths', data=total_deaths_per_region, palette='viridis')
plt.title('Total Deaths per WHO Region')
plt.xlabel('WHO Region')
plt.ylabel('Total Deaths')

for index, value in enumerate(total_deaths_per_region['TotalDeaths']):
    plt.text(index, value + 0.1, f'{value}', ha='center', va='bottom', fontsize=8)

plt.show()

total_recovered_per_region = df.groupby('WHO Region')['TotalRecovered'].sum().reset_index()

plt.figure(figsize=(12, 6))
bar_chart_recovered = sns.barplot(x='WHO Region', y='TotalRecovered', data=total_recovered_per_region, palette='mako')
plt.title('Total Recovered Cases per WHO Region')
plt.xlabel('WHO Region')
plt.ylabel('Total Recovered Cases')

for index, value in enumerate(total_recovered_per_region['TotalRecovered']):
    plt.text(index, value + 0.1, f'{value}', ha='center', va='bottom', fontsize=8)

plt.show()

ratio_per_region = df.groupby('WHO Region').apply(lambda x: (x['TotalDeaths'] / x['TotalCases']).mean()).reset_index(name='Total Death to Total Cases Ratio')

plt.figure(figsize=(12, 6))
bar_chart = sns.barplot(x='WHO Region', y='Total Death to Total Cases Ratio', data=ratio_per_region, palette='viridis')
plt.title('Total Death to Total Cases Ratio per WHO Region')
plt.xlabel('WHO Region')
plt.ylabel('Ratio')

for index, value in enumerate(ratio_per_region['Total Death to Total Cases Ratio']):
    plt.text(index, value + 0.005, f'{value:.4f}', ha='center', va='bottom', fontsize=8)

plt.show()

grouped_data = df.groupby('WHO Region')

region_summary = grouped_data.agg({
    'TotalCases': 'sum',
    'TotalDeaths': 'sum',
    'TotalRecovered': 'sum'
}).reset_index()

region_summary['Death Rate (%)'] = (region_summary['TotalDeaths'] / region_summary['TotalCases']) * 100
region_summary['Recovery Rate (%)'] = (region_summary['TotalRecovered'] / region_summary['TotalCases']) * 100

fig, ax = plt.subplots(figsize=(10, 6))
region_summary.plot(kind='bar', x='WHO Region', y=['Death Rate (%)', 'Recovery Rate (%)'], ax=ax)
ax.set_title('Death and Recovery Rates by WHO Region')
plt.show()

countries_with_zero_deaths = df[df['TotalDeaths'] == 0]['Country/Region']

print("Countries with zero deaths:")
print(countries_with_zero_deaths.tolist())

country_summary = df.groupby('Country/Region').agg({
    'TotalCases': 'sum',
    'TotalDeaths': 'sum',
    'TotalRecovered': 'sum',
    'ActiveCases': 'sum'
}).reset_index()

top_10_confirmed = country_summary.sort_values(by='TotalCases', ascending=False).head(10)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
confirmed_bar = sns.barplot(x='Country/Region', y='TotalCases', data=top_10_confirmed, palette='Blues')
plt.title('Top 10 Countries - Total Cases')
plt.xlabel('Country/Region')
plt.ylabel('Number of Total Cases')

for index, value in enumerate(top_10_confirmed['TotalCases']):
    plt.text(index, value + 10000, f'{value:,}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

country_summary = df.groupby('Country/Region').agg({
    'Population': 'max',
    'TotalCases': 'sum',
    'TotalDeaths': 'sum',
    'TotalRecovered': 'sum',
    'ActiveCases': 'sum',
    'TotalTests': 'sum'
}).reset_index()

top_10_total_tests = country_summary.sort_values(by='TotalTests', ascending=False).head(10)

plt.figure(figsize=(12, 6))
total_tests_bar = sns.barplot(x='Country/Region', y='TotalTests', data=top_10_total_tests, palette='rocket')
plt.title('Top 10 Countries - Total Tests')
plt.xlabel('Country/Region')
plt.ylabel('Total Tests')

for index, value in enumerate(top_10_total_tests['TotalTests']):
    plt.text(index, value + 50000, f'{value:,}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

bottom_10_confirmed = country_summary.sort_values(by='TotalCases').head(10)

plt.figure(figsize=(10, 4))
bottom_confirmed_bar = sns.barplot(x='Country/Region', y='TotalCases', data=bottom_10_confirmed, palette='Greens')
plt.title('Bottom 10 Countries - Total Cases')
plt.xlabel('Country/Region')
plt.ylabel('Number of Total Cases')

for index, value in enumerate(bottom_10_confirmed['TotalCases']):
    plt.text(index, value + 100, f'{value:,}', ha='center', va='bottom', fontsize=6)

plt.xticks(rotation=45, ha='right')

plt.ylim(0, max(bottom_10_confirmed['TotalCases']) + 500)

plt.tight_layout()
plt.show()

grouped_data = df.groupby('Country/Region')['TotalRecovered'].sum().reset_index()

top_10_countries = grouped_data.nlargest(10, 'TotalRecovered')

plt.figure(figsize=(10, 6))
bars = plt.bar(top_10_countries['Country/Region'], top_10_countries['TotalRecovered'], color='purple')
plt.xlabel('Country/Region')
plt.ylabel('TotalRecovered')
plt.title('Top 10 Countries with TotalRecovered')
plt.xticks(rotation=45, ha='right')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')

plt.tight_layout()
plt.show()

grouped_data = df.groupby('Country/Region')['TotalDeaths'].sum().reset_index()

top_10_countries = grouped_data.nlargest(10, 'TotalDeaths')

plt.figure(figsize=(10, 6))
bars = plt.bar(top_10_countries['Country/Region'], top_10_countries['TotalDeaths'], color='purple')
plt.xlabel('Country/Region')
plt.ylabel('TotalDeaths')
plt.title('Top 10 Countries with TotalDeaths')
plt.xticks(rotation=45, ha='right')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')

plt.tight_layout()
plt.show()

grouped_data = df.groupby('Country/Region')['ActiveCases'].sum().reset_index()

top_10_countries = grouped_data.nlargest(10, 'ActiveCases')

plt.figure(figsize=(10, 6))
bars = plt.bar(top_10_countries['Country/Region'], top_10_countries['ActiveCases'], color='purple')
plt.xlabel('Country/Region')
plt.ylabel('ActiveCases')
plt.title('Top 10 Countries with ActiveCases')
plt.xticks(rotation=45, ha='right')

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')

plt.tight_layout()
plt.show()

country_summary['Death to Confirmed Ratio'] = country_summary['TotalDeaths'] / country_summary['TotalCases']

top_10_countries = country_summary.sort_values(by='Death to Confirmed Ratio', ascending=False).head(10)

plt.figure(figsize=(12, 6))
top_10_bar = sns.barplot(x='Country/Region', y='Death to Confirmed Ratio', data=top_10_countries, palette='Reds')
plt.title('Top 10 Countries - Death to Confirmed Ratio')
plt.xlabel('Country/Region')
plt.ylabel('Death to Confirmed Ratio')

for index, value in enumerate(top_10_countries['Death to Confirmed Ratio']):
    plt.text(index, value + 0.001, f'{value:.4f}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

country_summary = df.groupby('Country/Region').agg({
    'TotalDeaths': 'sum',
    'Population': 'max'
}).reset_index()

country_summary['Deaths per Million'] = (country_summary['TotalDeaths'] / country_summary['Population']) * 1_000_000

top_10_countries = country_summary.sort_values(by='Deaths per Million', ascending=False).head(10)

plt.figure(figsize=(12, 6))
top_10_bar = sns.barplot(x='Country/Region', y='Deaths per Million', data=top_10_countries, palette='Reds')
plt.title('Top 10 Countries - Deaths per Million Population')
plt.xlabel('Country/Region')
plt.ylabel('Deaths per Million')

for index, value in enumerate(top_10_countries['Deaths per Million']):
    plt.text(index, value + 0.1, f'{value:.2f}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

country_summary = df.groupby('Country/Region').agg({
    'Population': 'max',
    'TotalCases': 'sum',
    'TotalDeaths': 'sum',
    'TotalRecovered': 'sum',
    'ActiveCases': 'sum'
}).reset_index()

country_summary['Total Death to Total Cases Ratio'] = country_summary['TotalDeaths'] / country_summary['TotalCases']

bottom_10_countries = country_summary.sort_values(by='Death to Total Cases Ratio', ascending=True).head(10)

plt.figure(figsize=(12, 6))
bottom_10_bar = sns.barplot(x='Country/Region', y='Death to Total Cases Ratio', data=bottom_10_countries, palette='Blues')
plt.title('Top 10 Countries (Least ratio) - Death to Total Cases Ratio')
plt.xlabel('Country/Region')
plt.ylabel('Death to Confirmed Ratio')

for index, value in enumerate(bottom_10_countries['Death to Confirmed Ratio']):
    plt.text(index, value + 0.001, f'{value:.4f}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

country_summary = df.groupby('Country/Region').agg({
    'TotalCases': 'sum',
    'TotalRecovered': 'sum'
}).reset_index()

country_summary['TotalCases to Recovered Ratio'] = country_summary['TotalCases'] / country_summary['TotalRecovered']

top_10_countries = country_summary.sort_values(by='TotalCases to Recovered Ratio', ascending=False).head(10)

plt.figure(figsize=(12, 6))
top_10_bar = sns.barplot(x='Country/Region', y='TotalCases to Recovered Ratio', data=top_10_countries, palette='Reds')
plt.title('Top 10 Countries - Total Cases to Recovered Ratio')
plt.xlabel('Country/Region')
plt.ylabel('Total Cases to Recovered Ratio')

for index, value in enumerate(top_10_countries['TotalCases to Recovered Ratio']):
    plt.text(index, value + 0.001, f'{value:.4f}', ha='center', va='bottom', fontsize=8)

plt.xticks(rotation=45, ha='right')
plt.show()

numerical_columns = ['TotalCases', 'TotalDeaths', 'TotalRecovered', 'ActiveCases', 'NewCases',
                     'NewDeaths', 'NewRecovered', 'Deaths/1M pop',
                     'Tot Cases/1M pop', 'Deaths/1M pop',
                     'TotalTests', 'Tests/1M pop']

correlation_matrix = df[numerical_columns].corr()

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Matrix of Numerical Variables')
plt.show()

correlation_threshold = 0.7

high_correlation_pairs = []
for i in range(len(correlation_matrix.columns)):
    for j in range(i + 1, len(correlation_matrix.columns)):
        if abs(correlation_matrix.iloc[i, j]) > correlation_threshold:
            variable_pair = (correlation_matrix.columns[i], correlation_matrix.columns[j])
            high_correlation_pairs.append((variable_pair, correlation_matrix.iloc[i, j]))

if high_correlation_pairs:
    print("Pairs of variables with high correlation:")
    for pair, correlation in high_correlation_pairs:
        print(f"{pair[0]} and {pair[1]}: {correlation:.2f}")
else:
    print("No pairs of variables with high correlation found.")